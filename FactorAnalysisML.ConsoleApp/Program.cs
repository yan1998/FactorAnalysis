// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using FactorAnalysisML.Model;
using FactorAnalysisML.Model.Models;

namespace FactorAnalysisML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\gorsh\AppData\Local\Temp\91c5ac1a-65e8-49e9-949f-651e53185c8c.tsv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            CurrencyExchangeModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            CurrencyExchangeModelOutput predictionResult = EURCurrencyExchangeConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual ExchangeRateEUR with predicted ExchangeRateEUR from sample data...\n\n");
            Console.WriteLine($"Id: {sampleData.Id}");
            Console.WriteLine($"Date: {sampleData.Date}");
            Console.WriteLine($"ExchangeRateUSD: {sampleData.ExchangeRateUSD}");
            Console.WriteLine($"CreditRate: {sampleData.CreditRate}");
            Console.WriteLine($"GDPIndicator: {sampleData.GDPIndicator}");
            Console.WriteLine($"ImportIndicator: {sampleData.ImportIndicator}");
            Console.WriteLine($"ExportIndicator: {sampleData.ExportIndicator}");
            Console.WriteLine($"InflationIndex: {sampleData.InflationIndex}");
            Console.WriteLine($"\n\nActual ExchangeRateEUR: {sampleData.ExchangeRateEUR} \nPredicted ExchangeRateEUR: {predictionResult.Score}\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static CurrencyExchangeModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<CurrencyExchangeModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: '\t',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            CurrencyExchangeModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<CurrencyExchangeModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
